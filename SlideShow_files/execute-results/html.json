{
  "hash": "e88506fc37b10ae885b60fc044736671",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Journey Through the Simulation\"\nauthor: \"Henry Cannon\"\nsubtitle: \"5/13/2025\"\nformat:\n  revealjs:\n    scrollable: true\n    slide-number: true\n    show-slide-number: all\n    embed-resources: true\nexecute:\n  echo: true\n  warning: false\n  message: false\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Background\n\nFocused on sports\n\nFigured a team sport would be the easiest to recreate\n\nTurned to Basketball due to the high scores and lower variation\n\n## The Code\n\n::: {.panel-tabset}\n### Creating a Game\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulate_game <- function(count, strength, opposing_strength_avg) {\n  opposing_strength <- rnorm(1, opposing_strength_avg, 1)\n  \n  main_team_score = round(rnorm(1, mean = 115 + strength - opposing_strength, abs(1-strength)))\n  away_team_score = round(rnorm(1, mean = 115 + opposing_strength - strength, abs(1-strength)))\n  difference = main_team_score - away_team_score\n  if (difference == 0) {\n    if (strength > opposing_strength) {\n      main_team_score <- main_team_score + 1\n      difference <- main_team_score - away_team_score\n    } else if (strength < opposing_strength) {\n      away_team_score <- away_team_score + 1\n      difference <- main_team_score - away_team_score\n    }\n  }\n  \n  results <- data.frame(\n    game = count,\n    main_team_score = main_team_score,\n    away_team_score = away_team_score,\n    strength = strength,\n    opposing_strength = opposing_strength,\n    difference = difference\n  )\n  return (results)\n}\n\nsimulate_game(1, 5, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  game main_team_score away_team_score strength opposing_strength difference\n1    1             116             118        5          6.994696         -2\n```\n\n\n:::\n:::\n\n\n\n\n### Creating a Season\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseason_simulation <- function(count, strength_input,  opposing_strength_avg_input) {\n  params <- list(\n    count = 1:82,\n    strength = rep(strength_input, 82),\n    opposing_strength_avg = rep(opposing_strength_avg_input, 82)\n  )\n\n  season <- list_rbind(pmap(params, simulate_game)) |>\n    select(difference) |>\n    mutate(win = difference > 0)\n  return_df <- data.frame(\n    season_perc = mean(season$win)\n  )\n  return (return_df)\n}\n\nseason_simulation(1, 5, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  season_perc\n1   0.5365854\n```\n\n\n:::\n:::\n\n\n\n\n### Simulating 50 Times\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperc_sim <- function(strength, opposing_strength) {\n  params <- list(\n      count = 1:50,\n      strength_input = rep(strength, 50),\n      opposing_strength_avg_input = rep(opposing_strength, 50)\n    )\n  itterations <- list_rbind(pmap(params, season_simulation)) |>\n    mutate(strength_level = strength) |>\n    mutate(opposing_strength = opposing_strength) |>\n    mutate(winning_perc = mean(season_perc))\n  return(\n    itterations |>\n      summarise(\n        winning_perc = mean(winning_perc),\n        strength_level = first(strength_level),\n        opposing_strength = first(opposing_strength)\n      )\n  )\n}\n\nperc_sim(5, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  winning_perc strength_level opposing_strength\n1    0.5004878              5                 5\n```\n\n\n:::\n:::\n\n\n\n\n### All Matchups\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   winning_perc strength_level opposing_strength\n1     0.5046341              1                 1\n2     0.8095122              2                 1\n3     0.8953659              3                 1\n4     0.9160976              4                 1\n5     0.9200000              5                 1\n6     0.9200000              6                 1\n7     0.9287805              7                 1\n8     0.9219512              8                 1\n9     0.9243902              9                 1\n10    0.9229268             10                 1\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## The Results\n::: {.panel-tabset}\n\n### Heat Map breakdown\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](SlideShow_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n### Scatter Plot Breakdown\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](SlideShow_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "SlideShow_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}