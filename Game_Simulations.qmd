---
title: "Basketball Game Simulations"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
knitr:
  opts_chunk:
    warning: false
---

For this project I amied to simulate basketball games based on both the teams strength and on the opposing teams strength. First I will build a function that can simulate a basketball game based on two inputs, the strength of the focus team and the strength of the opposing team. To create variability we will make opposing strength more a random strength value centered around the input. Next we will simulate this many times to get a season percentage. We will then repeat the season percentage for each pairing of strengths 1-10 many times to get the statistics.

```{r, message=FALSE}
#| echo: false
library(tidyverse)
library(purrr)
library(praise)
set.seed(47)
```

The following code is the simulation done for each game. Each game is composed by fitting a score for each team on a normal curve bsed on their strength then comparing to see who won. Additionally I added an if statement in there incase they get the same score. In basketball they never have a tied game so I had to ensure that for accuracy they couldn't tie int he simulation either. Here is an example output:

```{r, message=FALSE}
simulate_game <- function(count, strength, opposing_strength_avg) {
  opposing_strength <- rnorm(1, opposing_strength_avg, 1)
  
  main_team_score = round(rnorm(1, mean = 115 + strength - opposing_strength, abs(1-strength)))
  away_team_score = round(rnorm(1, mean = 115 + opposing_strength - strength, abs(1-strength)))
  difference = main_team_score - away_team_score
  if (difference == 0) {
    if (strength > opposing_strength) {
      main_team_score <- main_team_score + 1
      difference <- main_team_score - away_team_score
    } else if (strength < opposing_strength) {
      away_team_score <- away_team_score + 1
      difference <- main_team_score - away_team_score
    }
  }
  
  results <- data.frame(
    game = count,
    main_team_score = main_team_score,
    away_team_score = away_team_score,
    strength = strength,
    opposing_strength = opposing_strength,
    difference = difference
  )
  return (results)
}

simulate_game(1, 5, 5)
```

This next code chunk simulates the previous game simulation 82 times, giving a season percentage. Here is an example output for that code:

```{r, message=FALSE}

season_simulation <- function(count, strength_input,  opposing_strength_avg_input) {
  params <- list(
    count = 1:82,
    strength = rep(strength_input, 82),
    opposing_strength_avg = rep(opposing_strength_avg_input, 82)
  )

  season <- list_rbind(pmap(params, simulate_game)) |>
    select(difference) |>
    mutate(win = difference > 0)
  return_df <- data.frame(
    season_perc = mean(season$win)
  )
  return (return_df)
}

season_simulation(1, 5, 5)
```

Next this code runs the previous simulation 50 times giving us 50 seasons of 1 strength input combination allowing us to use Central Limit Theorem on the outputted values and giving us reliable data:

```{r, message=FALSE}

perc_sim <- function(strength, opposing_strength) {
  params <- list(
      count = 1:50,
      strength_input = rep(strength, 50),
      opposing_strength_avg_input = rep(opposing_strength, 50)
    )
  itterations <- list_rbind(pmap(params, season_simulation)) |>
    mutate(strength_level = strength) |>
    mutate(opposing_strength = opposing_strength) |>
    mutate(winning_perc = mean(season_perc))
  return(
    itterations |>
      summarise(
        winning_perc = mean(winning_perc),
        strength_level = first(strength_level),
        opposing_strength = first(opposing_strength)
      )
  )
}

perc_sim(5, 5)

```

Finally to finish off our simulation I am going to run the previous code chunk for each combination of code giving us a data frame that has an average percentage for each combination of strength inputs.

```{r, message=FALSE}

sim_params <- list(
  strength = rep(1:10, times = 10),
  opposing_strength = rep(1:10, each = 10)
)

perc_breakdown <- list_rbind(pmap(sim_params, perc_sim))
```

Now to visualize the data, the first graph is a heat map with the focus teams strength on the x-axis and the opposing strength team on the y-axis. This gives us a good showing of how the matchups go. Interestingly, there is a slight advantage to the focus team when they are roughly equal but both have high input values compared to low.

```{r, message=FALSE}
ggplot(perc_breakdown, aes(x = strength_level, y = opposing_strength, fill = winning_perc)) +
  geom_tile() +
  scale_fill_gradient(low = "red", high = "green", name = "Win %") +
  theme_minimal()
```

The other visual representation we have is a scatter plot that has strength - opposing strength on the x-axis and win percentage on the y-axis. This shows an interesting layout of how fast the differences in strength can affect the results of the games.

```{r, message=FALSE}
ggplot(perc_breakdown, aes(x = strength_level - opposing_strength, y = winning_perc)) +
  geom_point() +
  geom_smooth(se = FALSE)
```

These graphs show great insight into just how important it is to have a strong team relative to the rest of the league. Despite the simple simulation for each game, we find that just by having a somewhat equal team relative to the rest of the league you will make the playoffs, the average wins of the worst seed is around 50%. We also see that it only takes around a 2 or 3 strength index advantage to be able to get a very strong season put together. That being said this shows just how even the teams are in strength. The next steps would be to use real data and team analysis to be able to pinpoint just what the strngth index would be based off of but this is a very interesting and good start to this type of analysis.
